<?php

/**
 * @file
 * File conversion provided by ImageMagick PHP extension.
 *
 * @see http://www.php.net/manual/en/class.imagick.php
 */

/**
 * Implements of hook_menu().
 */
function cf_imagemagick_menu() {
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/settings/handler/imagemagick'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'ImageMagick',
    'description' => 'File conversion provided by ImageMagick.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cf_imagemagick_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'cf_imagemagick.admin.inc',
    'file path' => drupal_get_path('module', 'cf_imagemagick'),
    'weight' => 40,
  );

  return $items;
}

/**
 * Implements hook_convertfile_info().
 *
 * Register our provider and formats with convertfile module.
 */
function cf_imagemagick_convertfile_info() {
  return array(
    'cf_imagemagick' => array(
      'name' => 'ImageMagick',
      'types' => array(
        'png' => '.png (image/png)',
        'jpg' => '.jpg (image/jpeg)',
      ),
      'options' => 'cf_imagemagick_options',
      'exposed_options' => 'cf_imagemagick_options_exposed',
      'help' => array(
        'url' => 'https://github.com/delphian/drupal-convert-file/wiki/ImageMagick',
      ),
    ),
  );
}

/**
 * Custom options callback.
 *
 * Create render array for conversion options unique to ImageMagick. These
 * options will be displayed when editing the field structure of a field that
 * uses the convertfile widget and ImageMagick as the provider.
 *
 * Render array key names must be prefaced with the module name.
 *
 * @param string $format
 *   The format that is currently selected.
 * @param array $specific
 *   The portion of the form containing provider specific configuration data.
 *
 * @todo Create an alter hook for this, place another for actdual IM processing.
 * @see cf_imagemagick_convertfile_info()
 */
function cf_imagemagick_options($format, $specific = NULL) {
  $im = isset($specific['cf_imfs']) ? $specific['cf_imfs'] : NULL;
  $im_setresolution = isset($im['cf_imagemagick_opt_setresolution']) ? $im['cf_imagemagick_opt_setresolution'] : NULL;
  $im_resizeimage = isset($im['cf_imagemagick_opt_resizeimage']) ? $im['cf_imagemagick_opt_resizeimage'] : NULL;

  $options = array();
  $options['cf_imfs'] = array(
    '#type' => 'fieldset',
    '#title' => 'ImageMagick',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['cf_imfs']['cf_imagemagick_opt_setresolution'] = array(
    '#type' => 'textfield',
    '#title' => 'Set Resolution',
    '#default_value' => $im_setresolution,
    '#description' => 'Imagick::setResolution(<i>x</i>, <i>y</i>). Use 300 by 300 dpi example: "<b>300, 300</b>"',
  );
  $options['cf_imfs']['cf_imagemagick_opt_resizeimage'] = array(
    '#type' => 'textfield',
    '#title' => 'Resize Image',
    '#default_value' => $im_resizeimage,
    '#description' => 'Imagick::resizeImage(<i>x</i>, <i>y</i>, Imagick::FILTER_LANCZOS, 1). Make all images 800 pixels wide example: "<b>800, 0</b>"',
  );

  return $options;
}

/**
 * Transform exposed instance submission back to field instance like structure.
 *
 * @param array $form
 *   Form that the options have been exposed on.
 * @param array &$form_state
 *   Current values submitted by the form.
 * @param string $format
 *   Machine name of requested conversion format.
 *
 * @return array|bool
 *   An array formatted exactly as cf_imagemagick_options is. or NULL on error.
 *
 * @todo Create an alter hook for this, place another for actdual IM processing.
 * @see convertfile_options_exposed()
 * @see cf_imagemagick_options()
 */
function cf_imagemagick_options_exposed($form, &$form_state, $format = NULL) {
  $options = NULL;

  if (isset($form_state['values'])) {
    $values = $form_state['values'];
    foreach($values as $key => $value) {
      if (strpos($key, 'cf_imagemagick_opt') !== FALSE) {
        $options['cf_imfs'][$key] = $value;
      }
    }
  }

  return $options;
}

/**
 * Implements hook_help()
 */
function cf_imagemagick_help($path, $arg) {
  // If help is empty at end of function then NULL will be returned.
  $help = '';

  // Only use help if it is is still being requested.
  if (variable_get('cf_imagemagick_help', FALSE)) {
    if ($path == 'admin/config/convertfile/settings/handler/imagemagick') {

      $help .= '' .
      '<p>[<a href="https://github.com/delphian/drupal-convert-file/wiki/ImageMagick">Help Wiki</a>]</p>';

      // Helper text if ImageMagick PHP extension is missing.
      if (!class_exists('Imagick')) {
        $help .= '' .
          '<p>This provider requires the ImageMagick PHP extension to be installed.</p>' .
          '<p><a href="https://github.com/delphian/drupal-convert-file/wiki/Installing-ImageMagic-on-Mac-OSX-for-PHP-and-MAMP">https://github.com/delphian/drupal-convert-file/wiki/Installing-ImageMagic-on-Mac-OSX-for-PHP-and-MAMP</a></p>';
      }

    }
  }

  return (strlen($help)) ? $help : NULL;
}
