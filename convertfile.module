<?php

/**
 * @file
 * Automatically convert saved files to a different format.
 */

/**
 * Implements of hook_menu().
 */
function convertfile_menu() {
  // Create a new category on the admin config page.
  $items['admin/config/convertfile'] = array(
    'title' => 'Convert File',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer convertfile settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Provide a page to handle general settings and configuration.
  $items['admin/config/convertfile/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure Convert File options and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_config_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 10,
  );
  $items['admin/config/convertfile/settings/basic'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Settings',
  );
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/settings/watchdog'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Logs',
    'description' => 'View debug and error messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_watchdog_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 20,
  );
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/settings/handler'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Handlers',
    'description' => 'All installed file conversion handlers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_handler_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 30,
  );
  $items['admin/config/convertfile/settings/handler/config'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Config',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function convertfile_permission() {
  return array(
    'administer convertfile settings' => array(
      'title' => t('Administer Convert File settings'),
    ),
  );
}

/**
 * Collates all information on conversion providers and supported extensions.
 *
 * @param bool $reset
 *   Bypass all static variables and caching
 *
 * @return array
 *   An assocative array keyed by provider name. Each sub-array contains:
 *   - 'name': (string) Name of the provider.
 *   - 'callback': (string) Name of the callback function.
 *   - 'types': (array) Associative array keyed by file extension that can be
 *     converted to. Value will be the displayed name.
 */
function convertfile_collect_info($reset = FALSE) {
  static $info;

  if (!isset($info) || $reset) {
    if (!$reset && ($cached = cache_get('convertfile_providers', 'cache'))) {
      $info = $cached;
    }
    else {
      $info = module_invoke_all('convertfile_info');
    }
  }

  return $info;
}

/**
 * Implements hook_field_widget_info().
 */
function convertfile_field_widget_info() {
  return array(
    'convertfile_file' => array(
      'label' => t('Convert File'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'convertfile_image' => array(
      'label' => t('Convert Image'),
      'field types' => array('image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function convertfile_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($field['type'] == 'file') {
    $form['progress_indicator'] = array(
      '#type' => 'radios',
      '#title' => t('Progress indicator'),
      '#options' => array(
        'throbber' => t('Throbber'),
        'bar' => t('Bar with progress meter'),
      ),
      '#default_value' => $settings['progress_indicator'],
      '#description' => t('The throbber display does not show the status of uploads but takes up less space. The progress bar is helpful for monitoring progress on large uploads.'),
      '#weight' => 16,
      '#access' => file_progress_implementation(),
    );
  }
  if ($field['type'] == 'image') {
    // Use the file widget settings form.
    $form = file_field_widget_settings_form($field, $instance);
    $form['preview_image_style'] = array(
      '#title' => t('Preview image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('no preview') . '>',
      '#default_value' => $settings['preview_image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#weight' => 15,
    );
  }

  // Compile array of all file conversion providers.
  $options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    foreach($results as $key => $result) {
      $options[$key] = $result['name'];
    }
  }

  // Compile list of specific provider's formats.
  $format_options = array('none' => '- None -');
  if (isset($settings['convertfile_provider'])) {
    $handler = $settings['convertfile_provider'];
    if (isset($results[$handler])) {
      foreach($results[$handler]['types'] as $key => $value) {
        $format_options[$key] = $value;
      }
    }
  }

  // Add our common custom settings
  $form['convertfile_provider'] = array(
    '#title' => t('Convert using provider'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($settings['convertfile_provider']) ? $settings['convertfile_provider'] : 'none',
    '#description' => t('The provider used to convert this file.'),
    '#weight' => 20,
    '#ajax' => array(
      'callback' => 'convertfile_ajax_show_formats',
      'wrapper' => 'convertfile-format-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['convertfile_format'] = array(
    '#title' => t('Convert to format'),
    '#type' => 'select',
    '#description' => 'The file format that will be converted to.',
    '#options' => $format_options,
    '#default_value' => isset($settings['convertfile_format']) ? $settings['convertfile_format'] : 'none',
    '#prefix' => "<div id='convertfile-format-wrapper'>",
    '#suffix' => '</div>',
    '#weight' => 22,
  );

  return $form;
}

function convertfile_ajax_show_formats($form, $form_state) {
  // Compile list of specific provider's formats.
  $format_options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    $handler = $form_state['values']['instance']['widget']['settings']['convertfile_provider'];
    if (isset($results[$handler])) {
      foreach($results[$handler]['types'] as $key => $value) {
        $format_options[$key] = $value;
      }
    }
  }

  return array(
    '#title' => t('Convert to format'),
    '#type' => 'select',
    '#description' => 'The file format that will be converted to',
    '#options' => $format_options,
    '#prefix' => "<div id='convertfile-format-wrapper'>",
    '#suffix' => '</div>',
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Insert a custom validator for any fields managed by our widget.
 */
function convertfile_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#upload_validators']['convertfile_validate_conversion'] = array($instance);
  $element['#upload_validators']['file_validate_extensions'][] = $instance['settings']['file_extensions'];

  if ($field['type'] == 'file') {
    $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }
  if ($field['type'] == 'image') {
    $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }

  return $elements;
}

/**
 * Validator. Will call any registered handlers.
 *
 * @param stdClass $file
 *   File object that is being readied to be moved from temporary server
 *   upload bin.
 * @param array $instance
 *   Field instance that this file was submitted to.
 *
 * @return array
 *   An empty array on success. Contains at least one element of error message
 *   on failure.
 *
 * @see convertfile_field_widget_form()
 */
function convertfile_validate_conversion($file, $instance) {
  $report = array();
  $settings = $instance['widget']['settings'];

  $orig_file = clone $file;
  $info = convertfile_collect_info();
  $name = $info[$settings['convertfile_provider']]['name'];
  $function = isset($info[$settings['convertfile_provider']]['callback']) ?
    $info[$settings['convertfile_provider']]['callback'] : NULL;

  if ($function && function_exists($function)) {
    // This is not intended for contributed code.
    if (!$function($file, $instance)) {
      $report[] = "File conversion by {$name} callback failed.";
    }
  }
  else {
    // Everything _should be_ rules based.
    rules_invoke_event('convertfile_request', $file, $instance);
    if (isset($file->convertfile_error)) {
      $report[] = "File conversion by {$name} rule failed.";
    }
  }

  // Because the destination was messed with, make sure its still unique.
  $file->destination = file_destination($file->destination, FILE_EXISTS_RENAME);

  if ($orig_file->filename != $file->filename) {
    watchdog('convertfile', "{$name} Saved: {$orig_file->filename} To: {$file->filename} " . 
      "({$file->destination})", NULL, WATCHDOG_INFO);
  }

  return $report;
}

/**
 * Implements hook_help().
 */
function convertfile_help($path, $arg) {
  switch ($path) {
    // Main module help for the convertfile module
    case 'admin/help#convertfile':
      return '<p>' . t('Convert File adds a new widget for file and image fields named <u>Convert File</u> and <u>Convert Image</u>. The settings for these widget operate exactly as the default except for providing extra configuration that allow for automatic conversion of the file submitted to the field. See <a href="@convertfile">Convert File Settings</a> for more information.', array('@convertfile' => url('admin/config/convertfile/settings'))) . '</p>';
    case 'admin/config/convertfile/settings':
      return '<p>' . t('Edit a <a href="@convertfile">content type</a> and set a file or image field to use the new <u>Convert File</u> or <u>Convert Image</u> widgets.', array('@convertfile' => url('admin/structure/types'))) . '</p>';

  }
}
