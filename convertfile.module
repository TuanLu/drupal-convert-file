<?php

/**
 * @file
 * Automatically convert saved files to a different format.
 */

/**
 * Implements of hook_menu().
 */
function convertfile_menu() {
  // Create a new category on the admin config page.
  $items['admin/config/convertfile'] = array(
    'title' => 'Convert File',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer convertfile settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Provide a page to handle general settings and configuration.
  $items['admin/config/convertfile/config'] = array(
    'title' => 'Convert File Config',
    'description' => 'Configure Convert File options and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_config_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
  );
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/watchdog'] = array(
    'title' => 'Convert File Logs',
    'description' => 'View debug and error messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_watchdog_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function convertfile_permission() {
  return array(
    'administer convertfile settings' => array(
      'title' => t('Administer Convert File settings'),
    ),
  );
}

/**
 * Collates all information on conversion providers and supported extensions.
 *
 * @param bool $reset
 *   Bypass all static variables and caching
 *
 * @return array
 *   An assocative array keyed by provider name. Each sub-array contains:
 *   - 'name': (string) Name of the provider.
 *   - 'callback': (string) Name of the callback function.
 *   - 'types': (array) Associative array keyed by file extension that can be
 *     converted to. Value will be the displayed name.
 */
function convertfile_collect_info($reset = FALSE) {
  static $info;

  if (!isset($info) || $reset) {
    if (!$reset && ($cached = cache_get('convertfile_providers', 'cache'))) {
      $info = $cached;
    }
    else {
      $info = module_invoke_all('convertfile_info');
    }
  }

  return $info;
}

/**
 * Implements hook_convertfile_info().
 */
function convertfile_convertfile_info() {
  return array(
    'convertfile' => array(
      'name' => 'Convert File Module',
      'callback' => 'convertfile_do_conversion',
      'types' => array(
        'gz' => '.gz (application/x-gzip)',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function convertfile_field_widget_info() {
  return array(
    'convertfile_file' => array(
      'label' => t('Convert File'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'convertfile_image' => array(
      'label' => t('Convert Image'),
      'field types' => array('image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function convertfile_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($field['type'] == 'file') {
    $form['progress_indicator'] = array(
      '#type' => 'radios',
      '#title' => t('Progress indicator'),
      '#options' => array(
        'throbber' => t('Throbber'),
        'bar' => t('Bar with progress meter'),
      ),
      '#default_value' => $settings['progress_indicator'],
      '#description' => t('The throbber display does not show the status of uploads but takes up less space. The progress bar is helpful for monitoring progress on large uploads.'),
      '#weight' => 16,
      '#access' => file_progress_implementation(),
    );
  }
  if ($field['type'] == 'image') {
    // Use the file widget settings form.
    $form = file_field_widget_settings_form($field, $instance);
    $form['preview_image_style'] = array(
      '#title' => t('Preview image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('no preview') . '>',
      '#default_value' => $settings['preview_image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#weight' => 15,
    );
  }

  // Compile array of all file conversion providers.
  $options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    foreach($results as $key => $result) {
      $options[$key] = $result['name'];
    }
  }

  // Add our common custom settings
  $form['convertfile_provider'] = array(
    '#title' => t('Convert using provider'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($settings['convertfile_provider']) ? $settings['convertfile_provider'] : 'none',
    '#description' => t('The provider used to convert this file.'),
    '#weight' => 20,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * Insert a custom validator for any fields managed by our widget.
 */
function convertfile_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#upload_validators']['convertfile_validate_conversion'] = array($instance);

  if ($field['type'] == 'file') {
    $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }
  if ($field['type'] == 'image') {
    $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }

  return $elements;
}

/**
 * Convert PNG to JPG.
 */
function convertfile_validate_conversion($file, $instance) {
  $settings = $instance['widget']['settings'];

  $provider = $settings['convertfile_provider'];
  $info = convertfile_collect_info();
  if (isset($info[$provider]['callback'])) {
    $callback = $info[$provider]['callback'];
    if (function_exists($callback)) {
      $callback($file, $instance);
    }
  }

  // if (file_exists($file->uri)) {
  //   $dir = pathinfo($file->uri, PATHINFO_DIRNAME);
  //   $base = pathinfo($file->filename, PATHINFO_FILENAME);
  //   $ext = pathinfo($file->filename, PATHINFO_EXTENSION);

  //   // Convert all png to jpg.
  //   if ($ext == 'png') {
  //     $ext_new = 'jpg';

  //     copy('/Users/bryan/Downloads/rose.jpg', $file->uri);

  //     $file->filename = $base . '.' . $ext_new;
  //     $file->filesize = filesize($file->uri);
  //     $file->filemime = file_get_mimetype($file->filename);
  //   }
  // }
  return array();
}

function convertfile_do_conversion($file, $instance) {
  exit('die');
}