<?php

/**
 * @file
 * Automatically convert saved files to a different format.
 */

require_once('convertfile.db.conversion.inc');

/**
 * Implements of hook_menu().
 */
function convertfile_menu() {
  // Create a new category on the admin config page.
  $items['admin/config/convertfile'] = array(
    'title' => 'Convert File',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer convertfile settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Provide a page to handle general settings and configuration.
  $items['admin/config/convertfile/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure Convert File options and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_config_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 10,
  );
  $items['admin/config/convertfile/settings/basic'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Settings',
  );
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/settings/watchdog'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Logs',
    'description' => 'View debug and error messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_watchdog_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 20,
  );
  // Provide a page to handle watchdog error messages.
  $items['admin/config/convertfile/settings/handler'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Providers',
    'description' => 'All installed file conversion providers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convertfile_handler_form'),
    'access arguments' => array('administer convertfile settings'),
    'file' => 'convertfile.admin.inc',
    'file path' => drupal_get_path('module', 'convertfile'),
    'weight' => 30,
  );
  $items['admin/config/convertfile/settings/handler/config'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Config',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function convertfile_permission() {
  return array(
    'administer convertfile settings' => array(
      'title' => t('Administer Convert File settings'),
    ),
  );
}

/**
 * Collates all information on conversion providers and supported extensions.
 *
 * @param bool $reset
 *   Bypass all static variables and caching
 *
 * @return array
 *   An assocative array keyed by provider name. Each sub-array contains:
 *   - 'name': (string) Name of the provider.
 *   - 'callback': (string) Name of the callback function.
 *   - 'types': (array) Associative array keyed by file extension that can be
 *     converted to. Value will be the displayed name.
 */
function convertfile_collect_info($reset = FALSE) {
  static $info;

  if (!isset($info) || $reset) {
    if (!$reset && ($cached = cache_get('convertfile_providers', 'cache'))) {
      $info = $cached;
    }
    else {
      $info = module_invoke_all('convertfile_info');
    }
  }

  return $info;
}

/**
 * Implements hook_field_widget_info().
 */
function convertfile_field_widget_info() {
  return array(
    'convertfile_file' => array(
      'label' => t('Convert File'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'convertfile_image' => array(
      'label' => t('Convert Image'),
      'field types' => array('image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_element_info().
 *
 * Create convertfile_file type for form api use.
 */
function convertfile_element_info() {
  $file_path = drupal_get_path('module', 'file');
  $types['convertfile_file'] = array(
    '#input' => TRUE,
    '#process' => array('file_managed_file_process'),
    '#value_callback' => 'convertfile_managed_file_value',
    '#element_validate' => array('file_managed_file_validate'),
    '#pre_render' => array('file_managed_file_pre_render'),
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#upload_validators' => array(),
    '#upload_location' => NULL,
    '#size' => 22,
    '#extended' => FALSE,
    '#attached' => array(
      'css' => array($file_path . '/file.css'),
      'js' => array($file_path . '/file.js'),
    ),
  );

  return $types;
}

/**
 * Implements hook_element_info_alter().
 *
 * Attatch an extra process callback to managed_file element types for the
 * purpose of adding a new Revert button if applicable.
 */
function convertfile_element_info_alter(&$type) {
  $type['managed_file']['#process'][] = 'convertfile_managed_file_process';
}

/**
 * Process function to expand the managed_file element type.
 *
 * Expands the file type to include Revert button.
 *
 * @see file_managed_file_process().
 */
function convertfile_managed_file_process($element, &$form_state, $form) {
  $fid = isset($element['fid']['#value']) ? $element['fid']['#value'] : NULL;
  if ($fid) {
    if ($backups = convertfile_db_conversion_get_backups($fid)) {
      foreach($backups as $backup) {
        $file = file_load($backup);
        $element['convertfile_list_backup_' . $backup] = array(
          '#type' => 'submit',
          '#value' => t('Revert to') . ' ' . $file->filename,
          '#weight' => 20,
          '#submit' => array(
            'convertfile_managed_file_submit',
          ),
        );
      }
    }
  }
  return $element;
}

/**
 * Form submission handler for revert button of managed_file elements.
 *
 * @see convertfile_managed_file_process().
 * @see file_managed_file_submit().
 */
function convertfile_managed_file_submit($form, &$form_state) {
  drupal_set_message('Feature not implemented yet', 'warning');
}

/**
 * The #value_callback for a convertfile_file type element.
 */
function convertfile_managed_file_value(&$element, $input = FALSE, $form_state = NULL) {
  // Insert our pseudo field instance parameter.
  $instance = array(
    'widget' => array(
      'settings' => array(
        'convertfile_provider' => $element['#convertfile_provider'],
        'convertfile_format' => $element['#convertfile_format'],
      ),
    ),
  );
  $element['#upload_validators']['convertfile_validate_conversion'] = array($instance);

  return file_managed_file_value($element, $input, $form_state);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function convertfile_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($field['type'] == 'file') {
    $form['progress_indicator'] = array(
      '#type' => 'radios',
      '#title' => t('Progress indicator'),
      '#options' => array(
        'throbber' => t('Throbber'),
        'bar' => t('Bar with progress meter'),
      ),
      '#default_value' => $settings['progress_indicator'],
      '#description' => t('The throbber display does not show the status of uploads but takes up less space. The progress bar is helpful for monitoring progress on large uploads.'),
      '#weight' => 16,
      '#access' => file_progress_implementation(),
    );
  }
  if ($field['type'] == 'image') {
    // Use the file widget settings form.
    $form = file_field_widget_settings_form($field, $instance);
    $form['preview_image_style'] = array(
      '#title' => t('Preview image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('no preview') . '>',
      '#default_value' => $settings['preview_image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#weight' => 15,
    );
  }

  // Compile array of all file conversion providers.
  $options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    foreach($results as $key => $result) {
      $options[$key] = $result['name'];
    }
  }

  // Compile list of specific provider's formats.
  $format_options = array('none' => '- None -');
  if (isset($settings['convertfile_provider'])) {
    $handler = $settings['convertfile_provider'];
    if (isset($results[$handler])) {
      foreach($results[$handler]['types'] as $key => $value) {
        $format_options[$key] = $value;
      }
    }
  }

  // O(n^2)
  foreach($results as $key => $provider) {
    foreach($provider['types'] as $key => $type) {
      $format_options[$key] = $type;
    }
  }

  // Add our common custom settings
  $form['convertfile_provider'] = array(
    '#title' => t('Convert using provider'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($settings['convertfile_provider']) ? $settings['convertfile_provider'] : 'none',
    '#description' => t('The provider used to convert this file.'),
    '#weight' => 20,
  );

  $form['convertfile_format'] = array(
    '#title' => t('Convert to format'),
    '#type' => 'select',
    '#description' => 'The file format that will be converted to.',
    '#options' => $format_options,
    '#default_value' => isset($settings['convertfile_format']) ? $settings['convertfile_format'] : 'none',
    '#prefix' => "<div id='convertfile-format-wrapper'>",
    '#suffix' => '</div>',
    '#weight' => 22,
  );
  $convertfile_collected_info = json_encode(convertfile_collect_info());
  drupal_add_js(drupal_get_path('module', 'convertfile') . '/js/convert.admin.js');
  drupal_add_js("var convertfile = $convertfile_collected_info", array('type' => 'inline'));
  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * Insert a custom validator for any fields managed by our widget.
 */
function convertfile_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#upload_validators']['convertfile_validate_conversion'] = array($instance);
  $element['#upload_validators']['file_validate_extensions'][] = $instance['settings']['file_extensions'];

  if ($field['type'] == 'file') {
    $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }
  if ($field['type'] == 'image') {
    $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  }

  return $elements;
}

/**
 * Create associative array keyed by provider machine name and valued with
 * provider name.
 */
function convertfile_options_provider() {
  // Compile array of all file conversion providers.
  $options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    foreach($results as $key => $result) {
      $options[$key] = $result['name'];
    }
  }

  return $options;
}

/**
 * Create associative array keyed by format machine name and valued with
 * format name.
 */
function convertfile_options_format($provider_mn = NULL) {
  // Compile array of all file conversion format.
  $options = array('none' => '- None -');
  if ($results = convertfile_collect_info()) {
    foreach($results as $key => $provider) {
      if (!$provider || ($key == $provider_mn)) {
        foreach($provider['types'] as $format_mn => $format_name) {
          $options[$format_mn] = $format_name;
        }
      }
    }
  }

  return $options;
}

/**
 * Programmatic wrapper for convertfile_validate_conversion().
 *
 * Call this function directly to perform a programmatically based conversion.
 *
 * @param int|stdClass $file
 *   The FID or file object to convert. This object may be modified.
 * @param string $provider
 *   The machine name of the provider.
 * @param string $format
 *   The machine name of the format to convert to.
 *
 * @return bool
 *   TRUE on successful conversion, FALSE otherwise. See watchdog for error
 *   details.
 */
function convertfile_convert_file($file, $provider, $format) {
  $report = FALSE;

  $file = (is_object($file)) ? $file : file_load($file);
  if ($file) {
    $instance = array(
      'widget' => array(
        'settings' => array(
          'convertfile_provider' => $provider,
          'convertfile_format' => $format,
        ),
      ),
    );
    $result = convertfile_validate_conversion($file, $instance);
    if (is_array($result) && empty($result)) {
      $report = TRUE;
    }
  }

  return $report;
}

/**
 * Validator. Will call any registered providers.
 *
 * This is the main function to call when converting a file. In the event of
 * an error the provider should write an error message to
 * $file->convertfile['error'].
 *
 * @param stdClass $file
 *   File object that is being readied to be moved from temporary server
 *   upload bin.
 * @param array $instance
 *   Field instance that this file was submitted to.
 *
 * @return array
 *   An empty array on success. Contains at least one element of error message
 *   on failure. This error message will be displayed by drupal_set_message as
 *   this entire function is a validator.
 *
 * @see convertfile_field_widget_form()
 */
function convertfile_validate_conversion($file, $instance) {
  $report = array();
  $settings = $instance['widget']['settings'];

  // Save original information for any checks done after conversion is over.
  $file->convertfile = array();
  $file->convertfile['instance'] = $instance;
  $file->convertfile['original'] = clone $file;

  $info = convertfile_collect_info();
  // If no provider is provided (I.E. None or isset == false), treat the file
  // as a normal upload. Else, actually invoke rules.
  if (isset($info[$settings['convertfile_provider']]['name'])) {
    $name = $info[$settings['convertfile_provider']]['name'];
    $function = isset($info[$settings['convertfile_provider']]['callback']) ?
      $info[$settings['convertfile_provider']]['callback'] : NULL;

    // Save original file. @todo what if the conversion below via rules fails???
    $original_file = clone $file;
    // File already exists.
    if (isset($original_file->fid)) {
      $dir = drupal_dirname($file->uri);
      $file->convertfile['backup'] = file_copy($file, $dir . $file->filename, FILE_EXISTS_RENAME);
    }
    // File has just been uploaded.
    else {
      copy($original_file->uri, $original_file->destination);
      $original_file->uri = $original_file->destination;
      unset($original_file->destination);
      file_save($original_file);
      if (isset($original_file->fid)) {
        $file->convertfile['backup'] = $original_file;
      }
    }

    if ($function && function_exists($function)) {
      // This is not intended for contributed code.
      if (!$function($file, $instance)) {
        $report[] = "File conversion by {$name} callback failed.";
      }
    }
    else {
      // Everything _should be_ rules based.
      rules_invoke_event('convertfile_request', $file, $instance);
      if (isset($file->convertfile['error'])) {
        $report[] = "File conversion by {$name} rule failed.";
      }
    }

    // If a conversion has failed then remove the backup file.
    if (isset($file->convertfile['error'])) {
      // Remove the backup file.
      file_delete($file->convertfile['backup']);
      unset($file->convertfile['backup']);
    }

    // If file has a FID then it is not a new upload.
    if (isset($file->fid) && $file->fid) {
      file_save($file);
      $dir = drupal_dirname($file->uri);
      $original = $file->convertfile['original'];
      if ($moved_file = file_move($file, $dir . $file->filename, FILE_EXISTS_RENAME)) {
        $file->uri = $moved_file->uri;
      }
      else {
        $file->convertfile['error'] = 'Unable to rename file.';
        $report[] = "Unable to rename file.";
      }
    }
    // This is a new upload. Because the destination was messed with, make 
    // sure its still unique.
    else {
      $file->destination = file_destination($file->destination, FILE_EXISTS_RENAME);
    }

    // Log successful file conversion.
    if (empty($report)) {
      watchdog('convertfile', "{$name} Saved: {$file->convertfile['original']->filename} To: {$file->filename} " . 
        "({$file->uri})", NULL, WATCHDOG_INFO);
      rules_invoke_event('convertfile_success', $file, $instance);
    }
    // Log failed file conversion.
    else {
      watchdog('convertfile', "{$name} Failed to convert {$file->convertfile['original']->filename}. {$file->convertfile['error']}", NULL, WATCHDOG_ERROR);
      rules_invoke_event('convertfile_failure', $file, $instance);
    }
  }
  else {
    if ($settings['convertfile_provider'] != "none") {
      $report[] = "Unknown conversion provider: {$settings['convertfile_provider']}.";
    }
  }

  return $report;
}

/**
 * Search out and find all fields that use our widgets.
 */
function convertfile_find_widgets($widget, $reset = FALSE) {
  if (!$reset && ($cache = cache_get('convertfile_find_widget_' . $widget, 'cache'))) {
    $data = $cache->data;
  }
  else {
    $data = array();
    $instances = field_info_instances();
    foreach($instances as $entity_key => $entity) {
      foreach($entity as $bundle_key => $bundle) {
        foreach($bundle as $field_key => $field) {
          $type = $field['widget']['type'];
          if ($type == $widget) {
            $data[] = "{$entity_key} : {$bundle_key} : {$field_key}";
          }
        }
      }
    }
    cache_set('convertfile_find_widgets', $data, 'cache');
  }

  return $data;
}

/**
 * Implements hook_help().
 */
function convertfile_help($path, $arg) {
  // If help is empty at end of function then NULL will be returned.
  $help = '';

  // Settings page.
  if ($path == 'admin/config/convertfile/settings') {
    // Help text if rules_admin is not turned on.
    if (!module_exists('rules_admin')) {
      $help .= '<p><a href="/admin/modules">Rules UI</a> (rules_admin) ' . t('module must be enabled to edit or examine the details of rules.') . '</p>';
    }
  }

  // Settings page and all children.
  if (strpos($path, 'admin/config/convertfile/settings') !== FALSE) { 
    // Help text if no providers have been enabled.
    $providers = convertfile_collect_info();
    if (empty($providers)) {
      $help .= '<p>' . t('You must have at least one conversion provider enabled for this module to do anything useful. Visit the <a href="/admin/modules">modules page</a> and enable a conversion provider.') . '</p>';
    }
    // Help text if no widgets have been configured yet.
    $images = convertfile_find_widgets('convertfile_image');
    $files = convertfile_find_widgets('convertfile_file');
    if (empty($images) && empty($files)) {
      $help .= '<p>' . t('Edit a <a href="@convertfile">content type</a> and set a file or image field to use the new <u>Convert File</u> or <u>Convert Image</u> widgets. Include the converted format file extension in the accepted formats field.', array('@convertfile' => url('admin/structure/types'))) . '</p>';
    }
  }

  // Main module help for the convertfile module
  if ($path == 'admin/help#convertfile') {
    $help .= '<p>' . t('Convert File adds a new widget for file and image fields named <u>Convert File</u> and <u>Convert Image</u>. The settings for these widget operate exactly as the default except for providing extra configuration that allow for automatic conversion of the file submitted to the field. See <a href="@convertfile">Convert File Settings</a> for more information.', array('@convertfile' => url('admin/config/convertfile/settings'))) . '</p>';
  }

  return (strlen($help)) ? $help : NULL;
}

/**
 * Implements hook_file_presave().
 *
 * File will have an FID if it already exists (being updated), or it may have
 * no FID if it has just been uploaded.
 */
function convertfile_file_insert($file) {
  // Create new conversion entry.
  if (isset($file->convertfile['backup']) && isset($file->fid)) {
    // Have not thought out why this update is being called twice, but it is.
    if (!convertfile_db_conversion_is_backup($file->convertfile['backup']->fid)) {
      $provider = $file->convertfile['instance']['widget']['settings']['convertfile_provider'];
      convertfile_db_convertion_insert($file->convertfile['backup']->fid, $file->fid, $file->uid, $provider);
    }
  }
}

/**
 * Implements hook_file_update().
 *
 * Change the status of all backups to match current file status.
 */
function convertfile_file_update($file) {
  // Create new conversion entry.
  if (isset($file->convertfile['backup']) && isset($file->fid)) {
    // Have not thought out why this update is being called twice, but it is.
    if (!convertfile_db_conversion_is_backup($file->convertfile['backup']->fid)) {
      $provider = $file->convertfile['instance']['widget']['settings']['convertfile_provider'];
      convertfile_db_convertion_insert($file->convertfile['backup']->fid, $file->fid, $file->uid, $provider);
    }
  }

  // Update a conversion entry status.
  if (isset($file->fid)) {
    if ($fids = convertfile_db_conversion_get_backups($file->fid)) {
      foreach ($fids as $fid) {
        if ($bfile = file_load($fid)) {
          $bfile->status = $file->status;
          file_save($bfile);
        }
      }
    }
  }
}

/**
 * Implements hook_file_delete().
 *
 * Delete all the backups of a file when it is removed.
 */
function convertfile_file_delete($file) {
  if (isset($file->fid)) {
    if ($cids = convertfile_db_conversion_get_backups($file->fid)) {
      foreach ($cids as $cid => $fid) {
        if ($file = file_load($fid)) {
          file_delete($file);
          convertfile_db_conversion_delete($cid);
        }
      }
    }
  }
}
